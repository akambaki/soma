FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build

WORKDIR /src

# Copy solution and project files
COPY Soma.Platform.sln ./
COPY Soma.Platform.Core/Soma.Platform.Core.csproj Soma.Platform.Core/
COPY Soma.Platform.Api/Soma.Platform.Api.csproj Soma.Platform.Api/

# Restore dependencies
RUN dotnet restore

# Copy source code
COPY . .

# Build the application
RUN dotnet build -c Release --no-restore

# Create seeding application
RUN echo 'using Microsoft.Extensions.DependencyInjection;\n\
using Microsoft.Extensions.Hosting;\n\
using Microsoft.Extensions.Logging;\n\
using Microsoft.EntityFrameworkCore;\n\
using Microsoft.AspNetCore.Identity;\n\
using Soma.Platform.Core.Data;\n\
using Soma.Platform.Core.Models;\n\
using Soma.Platform.Core.Services;\n\
\n\
var host = Host.CreateDefaultBuilder(args)\n\
    .ConfigureServices((context, services) =>\n\
    {\n\
        var connectionString = Environment.GetEnvironmentVariable("ConnectionStrings__DefaultConnection");\n\
        var databaseProvider = Environment.GetEnvironmentVariable("DatabaseProvider") ?? "postgresql";\n\
        \n\
        services.AddDbContext<ApplicationDbContext>(options =>\n\
        {\n\
            if (databaseProvider.ToLower() == "postgresql")\n\
            {\n\
                options.UseNpgsql(connectionString);\n\
            }\n\
            else\n\
            {\n\
                options.UseSqlite(connectionString);\n\
            }\n\
        });\n\
        \n\
        services.AddIdentity<ApplicationUser, IdentityRole>()\n\
            .AddEntityFrameworkStores<ApplicationDbContext>();\n\
    })\n\
    .Build();\n\
\n\
var logger = host.Services.GetRequiredService<ILogger<Program>>();\n\
\n\
try\n\
{\n\
    await DataSeeder.SeedAsync(host.Services, logger);\n\
    logger.LogInformation("Seeding completed successfully");\n\
}\n\
catch (Exception ex)\n\
{\n\
    logger.LogError(ex, "Seeding failed");\n\
    Environment.Exit(1);\n\
}\n\
' > /src/SeedApp/Program.cs

# Create project file for seeding app
RUN mkdir -p /src/SeedApp && echo '<Project Sdk="Microsoft.NET.Sdk">\n\
  <PropertyGroup>\n\
    <OutputType>Exe</OutputType>\n\
    <TargetFramework>net8.0</TargetFramework>\n\
    <Nullable>enable</Nullable>\n\
    <ImplicitUsings>enable</ImplicitUsings>\n\
  </PropertyGroup>\n\
  <ItemGroup>\n\
    <ProjectReference Include="../Soma.Platform.Core/Soma.Platform.Core.csproj" />\n\
  </ItemGroup>\n\
  <ItemGroup>\n\
    <PackageReference Include="Microsoft.Extensions.Hosting" Version="8.0.0" />\n\
    <PackageReference Include="Microsoft.Extensions.Logging" Version="8.0.0" />\n\
  </ItemGroup>\n\
</Project>' > /src/SeedApp/SeedApp.csproj

# Build seeding app
RUN dotnet build /src/SeedApp/SeedApp.csproj -c Release

# Install postgresql-client for pg_isready
RUN apt-get update && apt-get install -y postgresql-client && rm -rf /var/lib/apt/lists/*

# Create seeding script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Starting database seeding..."\n\
echo "Waiting for database to be ready..."\n\
\n\
# Wait for PostgreSQL to be ready\n\
until pg_isready -h $DB_HOST -p 5432 -U $DB_USER; do\n\
    echo "PostgreSQL is unavailable - sleeping"\n\
    sleep 2\n\
done\n\
\n\
echo "PostgreSQL is up - executing seeding"\n\
cd /src/SeedApp\n\
dotnet run --no-build -c Release\n\
echo "Seeding completed successfully"\n\
' > /usr/local/bin/seed.sh && chmod +x /usr/local/bin/seed.sh

ENTRYPOINT ["/usr/local/bin/seed.sh"]