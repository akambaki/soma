name: Nightly Regression Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: 'false'
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  comprehensive-test-suite:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: testpassword123
          POSTGRES_USER: testuser
          POSTGRES_DB: soma_nightly
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=soma_nightly;Username=testuser;Password=testpassword123"
      ASPNETCORE_ENVIRONMENT: Testing

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/Soma.Platform.E2E.Tests.csproj') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Install Playwright browsers
      run: |
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install
        playwright install-deps

    - name: Run comprehensive test suite using existing script
      run: |
        chmod +x ./run-tests.sh
        ./run-tests.sh

    - name: Generate detailed coverage report
      run: |
        dotnet test --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage/ \
          --settings coverlet.runsettings \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput=./coverage/

    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-test-results
        path: |
          ./test-results/
          ./coverage/

    - name: Create test report
      if: always()
      run: |
        echo "# ðŸŒ™ Nightly Regression Test Report" > test-report.md
        echo "" >> test-report.md
        echo "**Date**: $(date)" >> test-report.md
        echo "**Commit**: ${{ github.sha }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Test Results Summary" >> test-report.md
        echo "" >> test-report.md
        
        # Check if tests passed based on exit code
        if [ -f ./test-results-summary.txt ]; then
          cat ./test-results-summary.txt >> test-report.md
        else
          echo "Test execution completed. Check artifacts for detailed results." >> test-report.md
        fi

    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-test-report
        path: test-report.md

    - name: Notify on failure
      if: failure()
      run: |
        echo "::error::Nightly regression tests failed! Check the artifacts for detailed information."
        echo "::error::This indicates potential regressions in the codebase that need immediate attention."

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security audit
      run: |
        dotnet list package --vulnerable --include-transitive
        
    - name: Install and run security scanner
      run: |
        dotnet tool install --global security-scan
        security-scan ./ --format sarif --output security-results.sarif
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: security-results.sarif

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_performance_tests == 'true' || github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: testpassword123
          POSTGRES_USER: testuser
          POSTGRES_DB: soma_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=soma_perf;Username=testuser;Password=testpassword123"
      ASPNETCORE_ENVIRONMENT: Testing

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build API project
      run: |
        dotnet build Soma.Platform.Api --configuration Release

    - name: Start API for performance testing
      run: |
        cd Soma.Platform.Api
        dotnet run --configuration Release --urls http://localhost:5000 &
        sleep 30  # Wait for API to start
        
    - name: Install performance testing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2-utils curl jq

    - name: Run basic performance tests
      run: |
        echo "Testing API health endpoint..."
        ab -n 1000 -c 10 http://localhost:5000/health
        
        echo "Testing registration endpoint..."
        curl -X POST http://localhost:5000/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"perf-test@example.com","password":"TestPassword123!","firstName":"Test","lastName":"User"}' \
          --max-time 10 || true

    - name: Generate performance report
      run: |
        echo "# Performance Test Results" > performance-report.md
        echo "" >> performance-report.md
        echo "**Date**: $(date)" >> performance-report.md
        echo "**Commit**: ${{ github.sha }}" >> performance-report.md
        echo "" >> performance-report.md
        echo "Basic load testing completed. See artifacts for detailed results." >> performance-report.md

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: performance-report.md